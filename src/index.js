import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./components/App";
import reportWebVitals from "./reportWebVitals";
import { BrowserRouter as Router } from "react-router-dom";

ReactDOM.render(
  <React.StrictMode>
    <Router>
      <App />
    </Router>
  </React.StrictMode>,
  document.getElementById("root")
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

/*
*******************************            
*** Общий итог ***

    - Что было сделано отлично

    - Что можно сделать лучше

    - Критические проблемы:

  - Заключение: 

  - Дальнейший разбор проблем в коде ... TODO

*******************************            
*** Детали по описанию задачи ***

* Ввести необходимые данные в форму.

  - Что было сделано отлично
    - "@import './normalize.css';" - сайт уже будет выглядеть одинаково на разных браузерах

  - Можно лучше:
    - index.css можно было бы разбить на несколько файлов: projects.css, todolist, auth-page, form-auth

  - Надо исправить:
    - "После успешного входа"
      - Сейчас при ошибке логина пользователю все равно показывается список проектов - это ошибка в безопасности данных,
        дающая доступ ко всем данным без логина
        Рекомендую всегда проверять поведение приложения на некорректных user/password
        и добавить в разметку элементы для отображения ошибок

    - "После успешной регистрации должен происходить редирект на страницу входа"
      - Сейчас переход на страницу входа будет даже при ошибке на регистрации (например "The \"email\" field is required")
        Рекомендую всегда проверять поведение приложения на некорректных сценариях
        и добавить в разметку элементы для отображения ошибок

    - "При отправке формы регистрации"
      - Сейчас поле ввода пароля показывает введенный текст - это ошибка безопасности,
        которая позволяет увидеть вводимый пароль всем рядом с пользователем.
        Рекомендую выбрать более подходящий UI для ввода пароля по типам из этого топика: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/password

    - На странице '/signin' при ширине браузера меньше 500 появляется горизонтальная прокрутка и видно 
      что черный background меньше, чем ширина эдиторов, а кнопка "Войти" расположена не по центру (нужен скриншот?)
      Рекомендую не задавать конкретные размеры элементам (500px), а использовать другие подходы (например min-width/max-width)
      и проверять внешний вид сайта на небольших размерах браузера или в режиме эмуляции мобильных устройств

*** Общие замечания ***

  - Можно лучше:
    - LoginPage/signin/auth-page, RegisterPage/signup/form-auth, TodoPage/projects - разные названия затрудняют навигацию по коду
      Рекомендую использовать одинаковые названия в своем коде.

    - В приложении использован react-router v5
      Рекомендую рассмотреть переход на react-router v6, который упрощает кодирование некоторых ситуаций
      См https://habr.com/ru/company/kts/blog/598835/

    - getResponse объявлена в файлах auth-api.js и todoist-api.js
      Рекомендую дублирующийся код выносить в общие файлы

    - "checkToken(jwt)" на useEffect в App.js выполняет асинхронный запрос на удаленный ресурс на рендере компонента App
      и при успешном завершении делает переход на страницу /projects
      С таким алгоритмом браузеру покажет пользователю текущую страницу (обращение к удаленному ресурсу потребует времени),
      а после окончания запроса браузер перейдет на другую страницу.
      Рекомендую поменять алгоритм и показывать индикацию загрузки на время выполнения любых запросов.

  - Надо исправить:
    - .catch((err) => { console.log(err); }); - такой код выведет ошибки в консоль, но скроет ее от пользователя
      и позволит выполняться коду в следующем блоке 'then' и приложение будет выглядеть "зависшим" или алгоритм ошибочно продолжит выполнение.
      Например, в этом примере текст 'Этот console.log будет выполняться даже при ошибке' будет выведен в консоль:
      (async function f() { throw 'Error'; })()
        .catch(() => console.log('STOP!!'))
        .then(() => console.log('Этот console.log будет выполняться даже при ошибке'))
      Рекомендую возвращать Error в блоке catch и добавить явную обработку этой ситуации в каждом вызывающем коде.

    - На запуске есть варнинги в консоли: index.js: 1 Warning: Invalid DOM property`maxlength`/Invalid DOM property `class`
      Рекомендую поглядывать в консоль в процессе работы и менять код по этим сообщениям

    - <UserContext.Provider value={user}> в файле TodoPage.jsx создает вложенность контекстов
      Конечно React позволяет делать вложенные контексты, но UserContext уже есть в компоненте App,
      он должен быть единственным в приложении и его не нужно декларировать еще раз
      См https://reactjs.org/docs/context.html#contextprovider

    - 'Bearer 793d9154e5507916cddbc96268c87fd082c634c6' - токен доступа к защищенному ресурсу передается на клиент в файле todoist-api.js
      Это позволяет получить доступ к данным без логина в приложение.
      Рекомендую рассмотреть добавление своего сервера, который будет получать запросы от браузера, делать из них запросы на api.todoist.com
      и хранить этот токен только на сервере в защищенном хранилище.

*/
